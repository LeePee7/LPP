# DNS 配置可自行修改
mixed-port: 7890                  # 混合端口 HTTP和SOCKS5用一个端口
geodata-mode: true                #【Meta专属】使用geoip.dat数据库(默认：false使用mmdb数据库)
tcp-concurrent: false             #【Meta专属】TCP 并发连接所有 IP, 将使用最快握手的 TCP
bind-address: "*"                 # 仅在将allow-lan设置为true时适用
                                  # #"*": 绑定所有IP地址
find-process-mode: strict           #匹配所有进程（always/strict/off）                              
allow-lan: true                   # 允许局域网的连接（可用来共享代理）
mode: rule                        # 规则模式：rule（规则） / global（全局代理）/ direct（全局直连）/ script (脚本)
log-level: info                   # 设置日志输出级别 (5 个级别：silent / error / warning / info / debug）
unified-delay: true               # 控制代理规则中的延迟测试的统一性
external-controller: 0.0.0.0:9093 #外部控制器,可以使用 RESTful API 来控制你的 clash 内核             
global-client-fingerprint: chrome #全局 TLS 指纹，优先低于 proxy 内的 client-fingerprint
                                  #可选： "chrome","firefox","safari","ios","random","none" options

geox-url:                         #自定义 geodata url
  geoip: "https://cdn.jsdelivr.net/gh/Loyalsoldier/v2ray-rules-dat@release/geoip.dat"
  geosite: "https://cdn.jsdelivr.net/gh/Loyalsoldier/v2ray-rules-dat@release/geosite.dat"
  mmdb: "https://cdn.jsdelivr.net/gh/Loyalsoldier/geoip@release/Country.mmdb"

profile:
  store-selected: true            # 存储 select 选择记录
  store-fake-ip: true             # 持久化 fake-ip
  
sniffer:                          # 嗅探域名 可选配置
  enable: true                    # 启用嗅探功能，检测和分析网络流量中的域名信息
  parse-pure-ip: true             # 是否使用嗅探结果作为实际访问，默认 true
  sniff:                          # 不同协议的嗅探配置
    TLS:                          # TLS 协议的嗅探配置
      ports: [443, 8443]          # 默认针对端口 443（默认的 HTTPS 端口）和端口 8443 进行 TLS 协议的嗅探
    HTTP:                         # HTTP协议的嗅探配置
      ports: [80, 8080-8880]      # 默认针对端口 80（默认的 HTTP 端口）以及端口范围 8080 到 8880 的 HTTP 协议进行嗅探
      override-destination: true  # 嗅探可以更改实际访问的目标
      
tun:                              # Tun 配置
  enable: true                    # 启用 Tun 模式
  stack: system                   # 可选： system/gvisor/lwip
                                  # tun模式堆栈,如无使用问题,建议使用 system 栈;
                                  # MacOS 用户推荐 gvisor栈,IOS无法使用system栈
  dns-hijack:                     # dns劫持,一般设置为 any:53 即可, 即劫持所有53端口的udp流量
     - 'any:53'
# strict_route: true              # 将所有连接路由到tun来防止泄漏，但你的设备将无法其他设备被访问
  auto-route: true                # 自动设置全局路由，可以自动将全局流量路由进入tun网卡。
  auto-detect-interface: true     # 自动识别出口网卡

dns:
  enable: true                    # 关闭将使用系统 DNS
  listen: 0.0.0.0:53              # DNS监听地址
  ipv6: true                      # 开启 IPv6 总开关，关闭阻断所有 IPv6 链接和屏蔽 DNS 请求 AAAA 记录 
  enhanced-mode: fake-ip          # 模式：redir-host或fake-ip
  fake-ip-range: 198.18.0.1/16    # Fake-IP解析地址池
  fake-ip-filter: ['*.lan', 'cable.auth.com', '*.msftconnecttest.com', '*.msftncsi.com', 'network-test.debian.org', 'detectportal.firefox.com', 'resolver1.opendns.com', '*.srv.nintendo.net', '*.stun.playstation.net', 'xbox.*.microsoft.com', '*.xboxlive.com', 'stun.*', 'global.turn.twilio.com', 'global.stun.twilio.com', 'localhost.*.qq.com', 'localhost.*.weixin.qq.com', '*.logon.battlenet.com.cn', '*.logon.battle.net', '*.blzstatic.cn', 'music.163.com', '*.music.163.com', '*.126.net', 'musicapi.taihe.com', 'music.taihe.com', 'songsearch.kugou.com', 'trackercdn.kugou.com', '*.kuwo.cn', 'api-jooxtt.sanook.com', 'api.joox.com', 'joox.com', 'y.qq.com', '*.y.qq.com', 'streamoc.music.tc.qq.com', 'mobileoc.music.tc.qq.com', 'isure.stream.qqmusic.qq.com', 'dl.stream.qqmusic.qq.com', 'aqqmusic.tc.qq.com', 'amobile.music.tc.qq.com', '*.xiami.com', '*.music.migu.cn', 'music.migu.cn', 'proxy.golang.org', '*.mcdn.bilivideo.cn', '*.cmpassport.com', 'id6.me', 'open.e.189.cn', 'mdn.open.wo.cn', 'opencloud.wostore.cn', 'auth.wosms.cn', '*.jegotrip.com.cn', '*.icitymobile.mobi', '*.pingan.com.cn', '*.cmbchina.com', 'pool.ntp.org', '*.pool.ntp.org', 'ntp.*.com', 'time.*.com', 'ntp?.*.com', 'time?.*.com', 'time.*.gov', 'time.*.edu.cn', '*.ntp.org.cn', 'PDC._msDCS.*.*', 'DC._msDCS.*.*', 'GC._msDCS.*.*']
                                  #  # fake ip 白名单列表'它们将不会被代理工具重定向或解析到真实的IP地址
  default-nameserver:             # 默认 DNS 服务器
    - 223.5.5.5
    - 114.114.114.114
    - 8.8.8.8
  nameserver:                     # 自定义 DNS 服务器
    - https://dns.alidns.com/dns-query
    - https://doh.pub/dns-query
  fallback:                       # 备用 DNS 服务器
    - https://1.0.0.1/dns-query
    - tls://dns.google
  fallback-filter:                # 过滤规则
    geoip: true
    geoip-code: CN
    ipcidr:
      - 240.0.0.0/4

# 当前 13 个主流协议节点配置模版，按需求修改，如不需要使用某协议节点，则无需删除，确保代理分流中没有该节点即可
proxies:
- name: vless-reality-vision                  # 可以自定义节点名称
  type: vless
  server: 1.2.3.4                             # 解析的域名或IP
  port: 12345                                 # 自定义端口
  uuid: f897325d-053d-45d1-899c-566692331f8   # 自定义 UUID
  network: tcp
  udp: true
  tls: true
  flow: xtls-rprx-vision
  servername: sega.com                        # 自定义回落域名
  reality-opts: 
    public-key: 4CiE7y7ZPBXIZWzMwphuSH7qdZyisNjD3CDQGjmilmI    # Reality public-key
    short-id: a8c031ce                        # Reality short-id
  client-fingerprint: chrome                  # 自定义浏览器指纹

- name: vless-reality-grpc                      # 可以自定义节点名称
  type: vless
  server: 1.2.3.4                               # 解析的域名或IP
  port: 12345                                   # 自定义端口
  uuid: 335ec5dd-61b1-4413-980e-5e009968f633    # 自定义 UUID
  network: grpc
  tls: true
  udp: true
  flow:
  client-fingerprint: chrome                    # 自定义浏览器指纹
  servername: sega.com                          # 自定义回落域名
  grpc-opts:
    grpc-service-name: "misaka"                 # 自定义的字符
  reality-opts:
    public-key: Aqp9oy2EFi4NNfRMZa3I3HdGhHbOIiSDZ8L28UCF73k    # Reality public-key
    short-id: 24410d1c                          # Reality short-id

- name: vless-xtls-rprx-vision                 # 可以自定义节点名称
  type: vless
  server: www.misaka.rest                      # 解析的域名
  port: 12345                                  # 自定义端口
  uuid: 5f74f86b-3ee8-44f4-adc4-6666be3d315    # 自定义 UUID
  network: tcp
  tls: true
  udp: true
  flow: xtls-rprx-vision
  client-fingerprint: chrome

- name: vless-ws-tls                               # 可以自定义节点名称
  type: vless
  server: www.misaka.rest                          # 解析的 IP / 域名或优选 IP / 域名
  port: 12345                                      # 自定义端口
  uuid: 3cc9a51c-db76-4ad2-a76b-8cb993bddb73       # 自定义 UUID
  udp: true
  tls: true
  network: ws
  servername: www.misaka.rest                      # SNI 域名，与下面 Host 一致
  ws-opts:
    path: "/?ed=2048"                              # 自定义 path 路径
    headers:
      Host: www.misaka.rest                        # Host 域名，与上面 server 字段的地址一致

- name: vless-ws                                   # 可以自定义节点名称
  type: vless
  server: www.misaka.rest                          # 解析的 IP / 域名或优选 IP / 域名
  port: 8880                                       # 自定义端口
  uuid: 77a571fb-4fd2-4b37-8596-1b7d9728bb5c       # 自定义 UUID
  udp: true
  tls: false
  network: ws
  servername: www.misaka.rest                      # SNI 域名，与下面 host 一致
  ws-opts:
    path: "/?ed=2048"                              # 自定义 path 路径
    headers:
      Host: www.misaka.rest                        # Host 域名，与上面 server 字段的地址一致

- name: vmess-ws-tls                               # 可以自定义节点名称
  type: vmess
  server: www.misaka.rest                          # 解析的 IP / 域名或优选 IP / 域名
  port: 12345                                      # 自定义端口
  uuid: 3cc9a51c-db76-4ad2-a76b-8cb993bddb73       # 自定义 UUID
  alterId: 0
  cipher: auto
  udp: true
  tls: true
  network: ws
  servername: www.misaka.rest                      # SNI 域名，与下面 host 一致
  ws-opts:
    path: "/?ed=2048"                              # 自定义 path 路径
    headers:
      Host: www.misaka.rest                        # Host 域名，与上面 server 字段的地址一致

- name: vmess-ws                                   # 可以自定义节点名称
  type: vmess
  server: www.misaka.rest                          # 解析的 IP / 域名或优选 IP / 域名
  port: 8880                                       # 自定义端口
  uuid: 77a571fb-4fd2-4b37-8596-1b7d9728bb5c       # 自定义 UUID
  alterId: 0
  cipher: auto
  udp: true
  tls: false
  network: ws
  servername: www.misaka.rest                      # SNI 域名，与下面 Host 一致
  ws-opts:
    path: "/?ed=2048"                              # 自定义 path 路径
    headers:
      Host: www.misaka.rest                        # Host 域名，与上面 server 字段的地址一致

- name: trojan-tcp-tls                             # 可以自定义节点名称
  type: trojan
  server: www.misaka.rest                          # 解析的域名
  port: 12345                                      # 自定义端口
  password: 123456789                              # 自定义认证密码
  client-fingerprint: chrome
  udp: true
  sni: www.misaka.rest                             # SNI 域名，与上面 server 字段的地址一致
  alpn:
    - h2
    - http/1.1
  skip-cert-verify: false

- name: shadowsocks                                # 可以自定义节点名称
  type: ss
  server: www.misaka.rest                          # 解析的 IP / 域名
  port: 443                                        # 自定义端口
  cipher: aes-128-gcm                              # 自定义加密方式，详细请查阅 Clash Meta 文档
  password: password                               # 自定义认证密码
  udp: true
  udp-over-tcp: false
  udp-over-tcp-version: 2
  ip-version: ipv4                                 # IP 协议版本，如节点 IP 为 IPv6 则填写 ipv6
  smux:
    enabled: false

- name: shadowsocks-shadowtls                      # 可以自定义节点名称
  type: ss
  server: 1.2.3.4                                  # 服务器本地 IP
  port: 443                                        # 自定义端口
  cipher: aes-128-gcm                              # 自定义加密方式，详细请查阅 Clash Meta 文档
  password: password                               # 自定义认证密码
  udp: true
  udp-over-tcp: false
  udp-over-tcp-version: 2
  ip-version: ipv4                                 # IP 协议版本，如节点 IP 为 IPv6 则填写 ipv6
  smux:
    enabled: false
  plugin: shadow-tls
  client-fingerprint: chrome                       # 自定义浏览器指纹
  plugin-opts:
    host: cloud.tencent.com                        # 自签证书的三方域名
    password: shadow_tls_password                  # ShadowTLS 认证密码
    version: 3                                     # ShadowTLS 协议，支持 1 / 2 / 3
    
- name: hysteria1                                  # 可以自定义节点名称
  type: hysteria
  server: 1.2.3.4                                  # 服务器本地 IP
  port: 12345                                      # 自定义端口，如使用端口跳跃则改为 ports: 1000,2000-3000
  auth-str: 123456                                 # 自定义认证密码
  alpn:
    - h3
  protocol: udp                                    # 自定义协议：udp / wechat-video / faketcp
  up: 20                                           # 自定义带宽上传限制
  down: 100                                        # 自定义带宽下载限制
  sni: www.bing.com                                # SNI 域名或自签证书的三方域名
  skip-cert-verify: true                           # 使用自签证书请保持此处为 true，如为 CA 证书建议修改为 false
  fast-open: true

- name: hysteria2                                  # 节点名称
  type: hysteria2
  server: 1.1.1.1                                  # 服务器 IP
  port: 1234                                       # 节点端口，目前暂不支持端口跳跃
  password: aa112233                               # 节点认证密码
  sni: www.misaka.rest                             # SNI 域名或自签证书的三方域名
  skip-cert-verify: true                           # 使用自签证书请保持此处为 true，如为 CA 证书建议修改为 false

- name: tuic-V4                                    # 可以自定义节点名称
  server: www.misaka.rest                          # 解析的域名或 IP
  port: 12345                                      # 自定义端口
  type: tuic
  token: a806923b-737c-4581-8b13-56666f911866      # 自定义 Token
  alpn: [h3]
  disable-sni: true
  reduce-rtt: true
  udp-relay-mode: native
  congestion-controller: bbr

- name: tuic-V5                                    # 可以自定义节点名称
  server: www.misaka.rest                          # 解析的域名或 IP
  port: 12345                                      # 自定义端口
  type: tuic
  uuid: a806923b-737c-4581-8b13-56666f911866       # 自定义 UUID
  password: a806923b-737c-4581-8b13-56666f911866   # 自定义认证密码
  alpn: [h3]
  disable-sni: true
  reduce-rtt: true
  udp-relay-mode: native
  congestion-controller: bbr

- name: warp-wireguard                                       # 可以自定义节点名称
  type: wireguard         
  server: 162.159.193.10                                     # 可自定义优选 EndPoint IP，与下方端口相对应
  port: 2408                                                 # 可自定义优选 EndPoint IP，与上方 IP 相对应
  ip: 172.16.0.2
  ipv6: 2606:4700:190:814e:7de3:5ddb:9d3e:9359               # warp 的私有 ipv6 地址，如删除本行，表示仅IPV4
  public-key: bmXOC+F1FxEMF9dyiK2H5/1SUtzH0JuVo51h2wPfgyo=
  private-key: gK3C8ijdVlT7sd5fsdf5ssdfgsdfgsdfgobT2U+rgHo=  # 获取 warp 的 私钥
  udp: true

proxy-providers:
  Subscribe: {<<: *p, path: ./proxy-providers/Sub.yaml, url: https://sub.xeton.dev/sub?target=clash&url=你的订阅链接&list=true&udp=true}
    # 可以使用任意类型的链接替换上面文字,多个链接使用英文符号的竖杠|隔开一起写上即可
    # Sub-Store生成的链接,可以直接替换上述url引号中的部分,具体见Sub-Store教程 

###建立锚点
    
# 策略组引用相关参数
pr: &pr {type: select, proxies: [🚀 手动切换, 🇭🇰 香港节点, 🇺🇸 美国节点, 🇸🇬 狮城节点, 🇯🇵 日本节点, 🇨🇳 台湾节点, ⚠️ 故障转移]}

# 订阅更新和延迟测试相关参数
p: &p {type: http, interval: 86400, health-check: {enable: true, url: http://www.gstatic.com/generate_204, interval: 1800}}

# 自动选择策略组：选取延迟最低节点
auto: &auto {type: url-test, lazy: true, url: http://www.gstatic.com/generate_204, interval: 900, use: [Subscribe]}

# 手动选择策略组：手动选择想要的节点/策略组
select: &select {type: select, use: [Subscribe]}

# 故障回退策略组：策略组将按顺序选择你列表中第一个可用的节点
fallback: &fallback {type: fallback, lazy: true, url: http://www.gstatic.com/generate_204, interval: 900, use: [Subscribe]}

# 负载均衡策略组：不同的请求将使用不同的代理节点
load-balance: &load-balance {type: load-balance, lazy: true, url: http://www.gstatic.com/generate_204, interval: 900, use: [Subscribe]}

# classical规则相关
c: &c {type: http, behavior: classical, interval: 86400}

# domain规则相关
d: &d {type: http, behavior: domain, interval: 86400}

# ipcidr规则相关
i: &i {type: http, behavior: ipcidr, interval: 86400}

###结束

proxy-groups:

  #分流分组

  - {name: 🚀 手动切换, type: select, use: [Subscribe], proxies: [🇭🇰 香港节点, 🇺🇸 美国节点, 🇸🇬 狮城节点, 🇯🇵 日本节点, 🇨🇳 台湾节点,]}

  - {name: 📺 Youtube, type: select, proxies: [🇭🇰 香港节点, 🇺🇸 美国节点, 🇸🇬 狮城节点, 🇯🇵 日本节点, 🇨🇳 台湾节点,]}

  - {name: 📺 Netflix, type: select, proxies: [🇸🇬 狮城节点,🇨🇳 台湾节点,]}

  - {name: 🌏 国外网站, <<: *pr}

  - {name: 📹 国际媒体, <<: *pr}

  - {name: 🍎 苹果服务, <<: *pr}

  - {name: 🧩 微软服务, <<: *pr}

  - {name: 🌌 谷歌服务, <<: *pr}

  - {name: 📟 电报消息, <<: *pr}

  - {name: 🤖 OpenAI, <<: *pr}

  - {name: 🎮 游戏平台, <<: *pr}

  - {name: 📺 哔哩哔哩, type: select, proxies: [DIRECT, 🇭🇰 香港节点, 🇨🇳 台湾节点]}

  - {name: 🐟 漏网之鱼, <<: *pr}

  #节点地区分组

  - {name: 🇭🇰 香港节点, <<: *auto, filter: "^(?=.*((?i)🇭🇰|香港|(\b(HK|Hong)\b)))(?!.*((?i)回国|校园|游戏|(\b(GAME)\b))).*$"}

  - {name: 🇺🇸 美国节点, <<: *auto, filter: "^(?=.*((?i)🇺🇸|美国|波特兰|达拉斯|俄勒冈|凤凰城|费利蒙|硅谷|拉斯维加斯|洛杉矶|圣何塞|圣克拉拉|西雅图|芝加哥|(\b(US|United States)\b)))(?!.*((?i)回国|校园|游戏|(\b(GAME)\b))).*$"}

  - {name: 🇸🇬 狮城节点, <<: *auto, filter: "^(?=.*((?i)🇸🇬|新加坡|狮|(\b(SG|Singapore)\b)))(?!.*((?i)回国|校园|游戏|(\b(GAME)\b))).*$"}

  - {name: 🇯🇵 日本节点, <<: *auto, filter: "^(?=.*((?i)🇯🇵|日本|川日|东京|大阪|泉日|埼玉|(\b(JP|Japan)\b)))(?!.*((?i)回国|校园|游戏|(\b(GAME)\b))).*$"}

  - {name: 🇨🇳 台湾节点, <<: *auto, filter: "(?i)🇹🇼|台湾|(\b(TW|Tai|Taiwan)\b)"}

  - {name: ⚠️ 故障转移, <<: *fallback}


rule-providers:

  # 规则修正
  Direct: {<<: *c, path: ./rule-providers/Direct.yaml, url: https://ghproxy.com/https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Direct/Direct.yaml}

  # 局域网   
  Lan: {<<: *c, path: ./rule-providers/Lan.yaml, url: https://ghproxy.com/https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/LocalAreaNetwork.yaml}

  # 下载服务
  Download: {<<: *c, path: ./rule-providers/Download.yaml, url: https://ghproxy.com/https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Download/Download.yaml}
    
  #广告拦截
  AD@dler-io: {<<: *c, path: ./rule-providers/AD.yaml, url: https://ghproxy.com/https://raw.githubusercontent.com/dler-io/Rules/main/Clash/Provider/Reject.yaml}

  # 苹果服务
  Apple: {<<: *c, path: ./rule-providers/Apple.yaml, url: https://ghproxy.com/https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/Apple.yaml}

  # 微软服务 
  Microsoft: {<<: *c, path: ./rule-providers/Microsoft.yaml, url: https://ghproxy.com/https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/rule-providers/Microsoft.yaml}

  # Netflix
  Netflix: {<<: *c, path: ./rule-providers/Youtube.yaml, url: https://gh-proxy.com/https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Netflix/Netflix_No_Resolve.yaml}

  # Youtube
  Youtube: {<<: *c, path: ./rule-providers/Youtube.yaml, url: https://ghproxy.com/https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/rule-providers/YouTube.yaml}
 
  # 谷歌服务
  Google: {<<: *c, path: ./rule-providers/Google.yaml, url: https://ghproxy.com/https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/rule-providers/Google.yaml}

  # 电报消息
  Telegram: {<<: *c, path: ./rule-providers/Telegram.yaml, url: https://ghproxy.com/https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/rule-providers/Telegram.yaml}

  # 哔哩哔哩
  BiliBili: {<<: *c, path: ./rule-providers/BiliBili.yaml, url: https://ghproxy.com/https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/rule-providers/Bilibili.yaml}

  # 游戏平台
  Game: {<<: *c, path: ./rule-providers/Game.yaml, url: https://ghproxy.com/https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Game/Game.yaml}

  # AI平台
  OpenAI: {<<: *c, path: ./rule-providers/OpenAI.yaml, url: https://ghproxy.com/https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/rule-providers/OpenAi.yaml}

  # 中国大陆
  ChinaIP: {<<: *i, path: ./rule-providers/ChinaIP.yaml, url: https://ghproxy.com/https://raw.githubusercontent.com/soffchen/GeoIP2-CN/release/clash-rule-provider.yml}
  ChinaDomain: {<<: *c, path: ./rule-providers/ChinaDomain.yaml, url: https://ghproxy.com/https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/ChinaDomain.yaml}

  # 国际媒体
  ProxyMedia: {<<: *c, path: ./rule-providers/ProxyMedia.yaml, url: https://ghproxy.com/https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/ProxyMedia.yaml}

  # 代理网站
  ProxyGFWlist: {<<: *c, path: ./rule-providers/ProxyGFWlist.yaml, url: https://ghproxy.com/https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/ProxyGFWlist.yaml}
  
rules:
 #- SCRIPT,quic,REJECT
  - RULE-SET,Direct,DIRECT
  - RULE-SET,Lan,DIRECT
  #- RULE-SET,Download,DIRECT
  - RULE-SET,AD@dler-io,REJECT
  - RULE-SET,OpenAI,🤖 OpenAI
  - RULE-SET,Apple,🍎 苹果服务
  - RULE-SET,Microsoft,🧩 微软服务
  - RULE-SET,Youtube,📺 Youtube
  - RULE-SET,Netflix,📺 Netflix
  - RULE-SET,Google,🌌 谷歌服务
  - RULE-SET,Telegram,📟 电报消息
  - RULE-SET,BiliBili,📺 哔哩哔哩
  - RULE-SET,Game,🎮 游戏平台
  - RULE-SET,ProxyMedia,📹 国际媒体
  - RULE-SET,ProxyGFWlist,🌏 国外网站
  - RULE-SET,ChinaDomain,DIRECT
  - RULE-SET,ChinaIP,DIRECT
  - GEOIP,CN,DIRECT
  - MATCH,🐟 漏网之鱼

script:
  shortcuts:
    quic: network == 'udp' and dst_port == 443
